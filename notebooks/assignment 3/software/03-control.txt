## Part 1

### Term P Proportional

is proportional to current value of the error function e(t) = SP - PV 
this error is the difference between the target setpoint and the current variable value 
with a scaling proportion value K_p For example, if the error is large and positive, 
 the control output will be proportionately large and positive and scaled by K_p
  If there is no error, there is no corrective response.

### Term I Integral

accounts for past values of SP - PV and integrates them over time to produce  the I Term
scaled by K_I factor.
the integral term seeks to eliminate the residual error by adding a control effect 
due to the historic cumulative value of the error.
When the error is eliminated, the integral term will cease to grow.

### Term D Derivative

is an estimate of the future trend based on its current rate of change .
 it is effectively seeking to reduce the effect of the SP − PV error
  by exerting a control influence generated by the rate of error change.
The more rapid the change, the greater the controlling effect.

### P controller

is a linear feedback control system
e(t)  = SP - PV which is the set point(target) - my point variable coming from the feedback term.
the new output variable will become Kp *  e(t)  

for example surge tank level control and setting speed for a walking person, but will have problems with drone attitude setting due to steady state error that can be fixed using integral term

### PI controller

which understands the present error  and uses an accumulated memory for the past
the integral is used for the history of the current variable , it adds an integral term over the history of the current controller along with the current proportional value
e(t) = SP -PV

the new output variable will become = kp e(t) + kI * ( integral_0^t e(t) dt )
this controller is used for drone system when you wanted it to hover on a specific attitude so the accumulation of history will help it reach zero error but when using proportional only the error will decrease and then will stabilize at each same attitude and  won't reach its goal.

### PD controller

this one adds  a derivative term to the proportion to predict the future output of the variable based on the rate of change of the error function e(t) .
The proportional–derivative (PD) control law has two terms: one proportional
to the current error, and the other proportional to the change in error:
e(t) = SP - PV
the new output variable will become
kp e(t) + Kd (e(t) - e(t-1))
Since the derivative controller adjusts
the control input according to the speed of error variation, it is able to make an
adjustment prior to the appearance of even larger errors.
Proportional-derivative (PD) control considers both the magnitude of the system error and the derivative of this error. Derivative control has the effect of adding damping to a system, and, thus, has a stabilizing influence on the system response.
This decreases the response times of the system and can make it susceptible to noise.
used in  temperature control and motion control.

### ID controller

it consists of integral term and derivative term to avoid future large error values and use information from accumulated errors.
as you are updating your variable based only on the expected future error and the accumulation of your past without using the present current values
This system doesn't exist as it  would cause system instability (going up and down without reaching zero error) since it didn't use the proportion term nd doesn't update the variable based on the current feedback error .

### PID controller

consists of proportional error signal added with derivative and integral of error signal e(t)

While designing  a PID controller, the general rule is to add proportional control to get the desired rise time, add derivative control to get the desired overshoot, and then add integral control  to eliminate the steady-state error.

Usage examples:
 -  mechanical device in steering system of Ships 
 -  temperature controllers 

### Method used

i used a proportion and derviative controller as a baseline which would compute the error based on the distance from the lane and from the angle would get the rate of change of the angular velocity and use this info to linearly rectify the route of the duckiebot.

this controller is  a PD controller and got a score 617.

and then used a PID controller which gave a score 671 
The difference is in adding the integral and another derivative terms to the updated output of angular velocity which made the bot more stable and reduced the oscillations while following the lane in straight line
because when  you are using accumulated error from your past this  eliminates steady state error coming from moving in a straight line and predicted future error based on the rate of change which reduces overshooting in corners.

## Part 2

### Cons of PID
Some failure cases of PID when you try to model non-symmetric / non linear systems (e.g. A system which heats much faster than it cools)

### LookAheadDistance parameter effect

#### How does the look-ahead distance affect performance? 
The effect of changing this parameter can change how my duckiebot tracks the path
 and there are two major goals: regaining the path and maintaining the path.
 In order to quickly regain the path between waypoints, 
 a small LookAheadDistance will cause your robot to move quickly towards the path

 #### What does a small look-ahead distance prioritize? 
  a small LookAheadDistance will cause your robot to move quickly towards the path. 
  the robot overshoots the path and oscillates along the desired path.

#### What about a larger one?

prioritize reducing the oscillations around the desired path and take larger curvatures around  corners in order to reduce the oscillations along the path, a larger look ahead distance can be chosen, however, it might result in larger curvatures near the corners.


### Experimenting with Lookup ahead distancee hyper parameter
Reducing its value would make it try to go back to the lane faster with some oscillations during his motion  forward but this increased the score to 680 (dist = 0.1)

Increasing its Lookup ahead distance resulted in few oscillations but the bots takes long curves in corners and takes time to go back on track which reduced the score to 434 (dist = 0.7)

using default 0.25 dist I got score 625